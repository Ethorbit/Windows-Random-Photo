/* TIScript code by: Ethan Christie */

$(#Settings).on("click", () => 
{
    ShowMenu($(#SettingsMenu));
});

$(#Info).on("click", () => 
{
    ShowMenu($(#InfoMenu));
});

$(#Fullscreen).on("click", () =>
{
    FullscreenToggle();
});

// Save folder for future image loading:
$(#PickFolder).on("click", () =>
{
    var folder = view.selectFolder("Load images from", System.path(#USER_HOME));
    if (folder) // The folder is valid
    {
        view.saveINI("Other", "ImgFolder", folder);
        Settings.SavedSettings.ImgFolder.value = folder;
        CurrentImg = 0; 
        imgDirectory = folder; // They opened a new folder within, the file they opened directly no longer applies
        UpdateImageList();
        ShuffleImages();
        CancelZoom();
    }
});

$(#DeleteImg).on("click", () =>
{
    if (imgToDisplay != null)
    {
        var del = view.msgbox
        (
            #warning, 
            "Are you sure you want to delete this image?\n It will be moved to the recycle bin.", 
            "Delete image?",
            [#yes, #no]
        );

        if (del == #yes)
        {    
            imgToDisplay = null;
            $(#ImgName).text = "";
       
            var wasRemoved = view.deleteFile(fullImgPath);
            if (wasRemoved != true)
                view.msgbox("Error", "Failed to delete file");

            fullImgPath = null;

            // Remove image from image list:
            for (var (k, v) in ImageList)
            {
                if (k == CurrentImg)
                {
                    ImageList.remove(k);
                    break;
                }
            }

            NextImage();
        }  

        WindowChanged();  
    }      
});

$(#NextImg).on("click", () =>
{
    CancelSlideshow();
    NextImage();
});

$(#PrevImg).on("click", () =>
{
    CancelSlideshow();
    PreviousImage();
});

$(#Slideshow).on("click", () =>
{
    SlideshowToggle();
});

$(#Refresh).on("click", () =>
{
    CancelZoom();
    ShuffleImages();
});
////////////////////////////////////////////////////////////////
// Handle resetting certain settings:
for (var v in $(#SettingsMenu).$$(img[alt=reset]))
{
    v.on("click", (me) =>
    {
        var txtBoxName = me.target.next.attributes["name"];
        var defSetting = GetDefSettingObject(txtBoxName);

        if (!IsADefaultSetting(txtBoxName))
            NoKeyName(me.target.next);
        else
        {
            me.target.next.attributes["maxlength"] = defSetting.value.length;
            me.target.next.text = defSetting.value;
            NoDuplicateKeys();
        }
    });
}

for (var v in $(#SettingsMenu).$$(img[alt=resetSection]))
{
    v.on("click", (me) =>
    {
        var nextEle = me.target.next;
        while (nextEle.$$(li)[0] == undefined)
        {
            nextEle = nextEle.next;
        }

        function SetVal(element)
        {
            var name = element.attributes["name"];
            var defSetting = GetDefSettingObject(name);

            element.value = defSetting.value;
            if (element.attributes["type"] == "hslider")
                UpdateSlider(element);    
        }

        for (var n in nextEle.$$(input))
        {
            SetVal(n);
        }

        for (var nn in nextEle.$$(select))
        {
            SetVal(nn);
        }
    });
}

///////////////////////////////////////////////////////////////////////////
// Handle saving settings:
//$(#SettingsMenu).$(form).on("submit", (me) => 
// Form element contains a massive memory leak from the API? Using custom form element instead:
$(#SettingsMenu).$(button[type=submit]).on("click", (me) =>
{
    function SaveElement(element)
    {
        var value = element.value;
        var name = element.attributes["name"];
        var setting = GetSettingObject(name);

        if (value != setting.value && value != "Enter a key" 
        || value == setting.value && SettingIsSaved(setting.section, name) && value != view.getINI(setting.section, name))
        {          
            view.saveINI(setting.section, name, value.toString());
        }
        else if (value == "Enter a key")
        {
            view.saveINI(setting.section, name, "");
        }
    }

    for (var v in $(#SettingsMenu).$$(select))
    {
        SaveElement(v);
    }

    for (var v in $(#SettingsMenu).$$(input))
    {
        SaveElement(v);
        $(#SettingsMenu).style["visibility"] = "none";
    }

    UpdateSettingsList();
    WindowChanged();

    if (GetSetting("OverlayHideToolbar") == false)
        $(#toolbar).style["visibility"] = "visible";
});

$(#SettingsMenu).$(button[type=cancel]).on("click", () =>
{
    var result = view.msgbox(#warning, "Abort changes and close?", "Are you sure?", [#yes, #no]);
    if (result == #yes)
    {
        $(#SettingsMenu).style["visibility"] = "none";
        WindowChanged();
    }
});