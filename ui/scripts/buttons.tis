/* TIScript code by: Ethan Christie */

$(#Settings).on("click", () => 
{
    ShowMenu($(#SettingsMenu));
});

$(#Info).on("click", () => 
{
    ShowMenu($(#InfoMenu));
});

$(#Fullscreen).on("click", () =>
{
    FullscreenToggle();
});

// Save folder for future image loading:
$(#PickFolder).on("click", () =>
{
    var folder = view.selectFolder("Load images from", System.path(#USER_HOME));
    if (folder)
        view.saveINI("Other", "ImgFolder", folder);
});

$$(.ImgMenuBtn)[0].on("click", () =>
{
    CancelSlideshow();
    NextImage();
});

$$(.ImgMenuBtn)[1].on("click", () =>
{
    CancelSlideshow();
    NextImage();
});

$(#Slideshow).on("click", () =>
{
    SlideshowToggle();
});

////////////////////////////////////////////////////////////////
// Handle resetting certain settings:
for (var v in $(#SettingsMenu).$$(img[alt=reset]))
{
    v.on("click", (me) =>
    {
        var txtBoxName = me.target.next.attributes["name"];
        var defSetting = GetDefSettingObject(txtBoxName);

        if (!IsADefaultSetting(txtBoxName))
            NoKeyName(me.target.next);
        else
        {
            me.target.next.attributes["maxlength"] = defSetting.value.length;
            me.target.next.text = defSetting.value;
            NoDuplicateKeys();
        }
    });
}

for (var v in $(#SettingsMenu).$$(img[alt=resetSection]))
{
    v.on("click", (me) =>
    {
        var nextEle = me.target.next;
        while (nextEle.$$(li)[0] == undefined)
        {
            nextEle = nextEle.next;
        }

        for (var n in nextEle.$$(input))
        {
            var name = n.attributes["name"];
            var defSetting = GetDefSettingObject(name);

            n.value = defSetting.value;
            if (n.attributes["type"] == "hslider")
                UpdateSlider(n);    
        }
    });
}

///////////////////////////////////////////////////////////////////////////
// Handle saving settings:
//$(#SettingsMenu).$(form).on("submit", (me) => 
// Form element contains a massive memory leak from the API? Using custom form element instead:
$(#SettingsMenu).$(button[type=submit]).on("click", (me) =>
{
    //for (var (name, value) in me.target.value)
    for (var v in $(#SettingsMenu).$$(input))
    {
        var value = v.value;
        var name = v.attributes["name"];
        var setting = GetSettingObject(name);

        if (value != setting.value && value != "Enter a key" 
        || value == setting.value && SettingIsSaved(setting.section, name) && value != view.getINI(setting.section, name))
        {          
            view.saveINI(setting.section, name, value.toString());
        }
        else if (value == "Enter a key")
        {
            view.saveINI(setting.section, name, "");
        }

        $(#SettingsMenu).style["visibility"] = "none";
    }

    UpdateSettingsList();
    WindowChanged();

    if (GetSetting("OverlayHideToolbar") == false)
        $(#toolbar).style["visibility"] = "visible";
});

$(#SettingsMenu).$(button[type=cancel]).on("click", () =>
{
    var result = view.msgbox(#warning, "Abort changes and close?", "Are you sure?", [#yes, #no]);
    if (result == #yes)
        $(#SettingsMenu).style["visibility"] = "none";
});