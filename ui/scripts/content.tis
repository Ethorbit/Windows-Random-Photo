/* TIScript code by: Ethan Christie */
var (imgWidth, imgHeight) = 0.0;
var imgRatio = 0.0;
var centerWidth = 0.0;
var centerHeight = 0.0;
var imgToDisplay = null; 
var imgDirectory = null;
var ImageList = new Array();
var imgTooThin = false;
var imgTooShort = false;
var CurrentImg = 0;
var allowFillImg = false;
var imgIsZoomed = false;
var imgZoomAmount = 1.0;
var (zoomX, zoomY);
var isMovingImage = false;

var fnRegex = ".*.[.]([Jj][Pp](?:[Ee]|)[Gg]|[Pp][Nn][Gg]|[Bb][Mm][Pp]|[Gg][Ii][Ff]|[Ss][Vv][Gg]|[Ww][Ee][Bb][Pp])$";

function directImage(fullPath) // Program was passed an argument, most likely an image path due to program being opened by image
{
    var directory = "";
    var filename = "";

    if (fullPath.lastIndexOf("\\") > fullPath.lastIndexOf("/"))
    {
        directory = fullPath.slice(0, fullPath.lastIndexOf("\\"));
        filename = fullPath.slice(fullPath.lastIndexOf("\\") + 1, fullPath.length);
    }       
    else
    {
        directory = fullPath.slice(0, fullPath.lastIndexOf("/"));
        filename = fullPath.slice(fullPath.lastIndexOf("/") + 1, fullPath.length);
    }
       
    imgDirectory = directory;
    UpdateImageList(); // Add photo randomization for the current directory of the image the user opened program with
   
    if (filename.match(fnRegex)) 
    {
        for (var (k, v) in ImageList) // User opened program with image, so show that image
        {
            if (v == filename)
            {
                DisplayImage(k);
            }
        }
    }
    else
    {
        ShowOverlayText("Not a valid or supported image.", "red", "bottom", 3000ms);
        imgToDisplay = null;
    }

    WindowChanged();
}

function GetFullImgPath(filename)
{
    var imgPath = imgDirectory + "/";
    return imgPath + filename;
}

// Show/hide content displayed over image:
function ShowContentOverlay()
{
    if (!onToolbar && !MenuIsOpen() && !isMovingImage)
    {
        $(#ImgMenu).style["visibility"] = "visible";  

        if (imgZoomAmount == 1.0)
            $(#ImgOverlay).style["cursor"] = "default";
        else
            $(#ImgOverlay).style["cursor"] = "move";

        if (GetSetting("OverlayHideToolbar") == true)
        {
            $(#toolbar).style["visibility"] = "visible";
        }

        if (GetSetting("OverlayHideName") == true && imgZoomAmount == 1.0)
            $(#ImgName).style["visibility"] = "visible";
    } 
}

function HideContentOverlay()
{
    if (!onImgMenuBtn)
    {
        if (GetSetting("OverlayHideToolbar") == true)
        {
            $(#toolbar).style["visibility"] = "hidden";
        }

        $(#ImgMenu).style["visibility"] = "none";

        if (GetSetting("OverlayHideName") == true)
            $(#ImgName).style["visibility"] = "none";
    }
}

// Show/Hide window border, cover taskbar & overlap all windows:
function FullscreenToggle() 
{
    fullscreen = !fullscreen;
    if (fullscreen == true)
    {
        view.windowState = View.WINDOW_MINIMIZED; // FULL_SCREEN won't cover taskbar if the window is already in fullscreen
        view.windowState = View.WINDOW_FULL_SCREEN;
    }
    else 
    {
        view.windowState = View.WINDOW_SHOWN;
        $(body).style["cursor"] = "default";
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////
// Handle dynamic content functionality:
function Slideshowoff()
{
    $(#Slideshow).style["opacity"] = 0.70;
    ShowOverlayText("Slideshow was cancelled.", "red", "top", 2000ms);
}

function CancelSlideshow()
{
    if (slideshow == true)
    {
        Slideshowoff();
        slideshow = false;
    }
}

function SlideshowToggle() 
{
    slideshow = !slideshow;
    if (slideshow == true)
    {
        $(#Slideshow).style["opacity"] = 1.0;
        ShowOverlayText("Slideshow started.", "green", "top", 2000ms);

        var switchTime = GetSetting("SlideshowDisplayTime").toString() + "s";
        self.timer(Duration.parse(switchTime), () => 
        {
            if (!slideshow)
                return false;

            NextImage();
            return true;
        });
    }
    else
    {
        Slideshowoff();
    }
}

function ShuffleImages()
{
    if (ImageList.length > 0)
    {
        RefreshImage();
        var curImg = ImageList[CurrentImg];

        ImageList.sort(() => 
        {
            if (Math.random() > 0.5)
                return +1;
            else
                return -1;
        });

        var index = -1;
        for (var (k, v) in ImageList)
        {
            if (v == curImg)
            {
                index = k;
            }
        }

        ImageList.splice(index, 1);
        ImageList.push(curImg); // Add what the user was viewing before shuffle to the end of the array
    }

    DisplayFirstImage();
}

function UpdateImageList() // Reconstruct image list based on saved image path
{
    if (imgDirectory == null) // Default to saved setting if the directory is still null
        imgDirectory = GetSetting("ImgFolder");

    ImageList.splice(0, ImageList.length + 1);
    //ImageList = new Array();

    function SysCB (name, attr)
    {
         // Only match supported whitelisted formats (jpg,png,bmp,gif,svg,webp):
        if (!name.match(fnRegex)) 
            return true;
        // Only match files (not directories):
        if (attr & System.IS_DIR || attr & System.IS_HIDDEN) 
            return true;

        ImageList.push(name);
        return true;
    }

    System.scanFiles(imgDirectory + "/*.*", SysCB);

    ShuffleImages();
}

function ImgIsGIF()
{
    if (imgToDisplay == null)
        return false;

    if (imgToDisplay.url.match(".*.[.]([Gg][Ii][Ff])$"))
        return true;
    else
        return false;
}

var (gifWidth, gifHeight);
var isGif = false;
function DisplayImage(index)
{    
    $(#ImgName).text = imgDirectory.replace("file://", "") + "/" + ImageList[index];
    
    imgToDisplay = self.loadImage(GetFullImgPath(ImageList[index]));
    RefreshImage();

    if (ImgIsGIF() == true)
    {           
        (gifWidth, gifHeight) = imgToDisplay.size(); // Backup height/width for when we remove the loaded image
        //imgToDisplay = "GIF"; // If this remains valid then we would be allocating memory for 2 of the same gifs!
        isGif = true;
        $(#gifimg).style["visibility"] = "visible";
        $(#gifimg).attributes["src"] = GetFullImgPath(ImageList[index]);
        allowFillImg = false;
    }
    else
    {
        if ($(#gifimg))
            $(#gifimg).attributes["src"] = "";  

        allowFillImg = true; 
        isGif = false;
    }
}

function DisplayFirstImage()
{
    // Display no image error if the first image in the image list is null:
    if (ImageList.length > 0)
    {
        if ($(#NoImageFound).style["visibility"] == "visible")
            $(#NoImageFound).style["visibility"] = "none";

        DisplayImage(0);
        CurrentImg = 0;
    }
    else
    {
        if (ImgIsGIF() == false)
            imgToDisplay = null;
    }

    WindowChanged();
}

function ImageChange()
{
    CancelZoom();

    if ($(#NoImageFound).style["visibility"] == "visible")
        $(#NoImageFound).style["visibility"] = "none";

    WindowChanged();

    self.timer(1ms, () =>
    {
        WindowChanged();
    });
}

function NextImage()
{
    if (ImageList.length == 0)
        return;

    if (CurrentImg + 1 < ImageList.length)
    {
        CurrentImg++;
        DisplayImage(CurrentImg);
    }
    else
       ShuffleImages(); // Let the next image work forever

    ImageChange();
}

function PreviousImage()
{
    if (ImageList.length == 0)
        return;

    if (CurrentImg - 1 >= 0)
    {
        CurrentImg--;
        DisplayImage(CurrentImg);
    }

    ImageChange();
}

function ZoomPercentage() 
{
    return GetSetting("ContentZoomMultiplier").toInteger() * 1.0 / 100.0;
};

function ZoomOrMove()
{
    self.timer(350ms, () =>
    {
        if (GetSetting("OverlayHideToolbar") == false)
            $(#toolbar).style["visibility"] = "visible";
        if (GetSetting("OverlayHideName") == false)
            $(#ImgName).style["visibility"] = "visible";
        
        $(#PrevImgImg).style["visibility"] = "visible";
        $(#NextImgImg).style["visibility"] = "visible";
        blockToolbar = false;
        WindowChanged();
        return false;
    });
}

var justZoomed = false;
function Zoomed()
{
    justZoomed = true;
    self.timer(1ms, () =>
    {
        justZoomed = false;
    });

    // Hide overlay stuff while zooming:
    if (imgZoomAmount > 1.0)
    {
        if ($(#toolbar).style["visibility"] == "visible")
        {
            $(#toolbar).style["visibility"] = "none";
            $(#PrevImgImg).style["visibility"] = "none";
            $(#NextImgImg).style["visibility"] = "none";
            $(#ImgName).style["visibility"] = "none";
        }

        blockToolbar = true;
        ZoomOrMove();
    }

    WindowChanged();
}

function ZoomImage(val)
{
    if (isGif == false && !MenuIsOpen())
    {
        imgIsZoomed = true;

        if (val == -1)
        {   
            if (imgZoomAmount + ZoomPercentage() <= 500.0)
                imgZoomAmount += ZoomPercentage();
            else 
                imgZoomAmount = 500.0;
        }
        else // User is zooming with pinch gesture:
        {
            if (imgZoomAmount + val <= 500.0)
                imgZoomAmount += val;
            else 
                imgZoomAmount = 500.0;
        }


        Zoomed();
    }
}

function ZoomoutImage(val)
{
    if (isGif == false && !MenuIsOpen())
    {
        if (imgToDisplay == null)
            return;

        if (val == -1)
        { 
            if (imgZoomAmount - ZoomPercentage() <= 1.0)
            {
                imgZoomAmount = 1.0;
                imgIsZoomed = false;
                $(#ImgOverlay).style["cursor"] = "default";
            }
            else
                imgZoomAmount -= ZoomPercentage();
        }
        else // User is zooming with pinch gesture:
        {
            if (imgZoomAmount - val <= 1.0)
            {
                imgZoomAmount = 1.0;
                imgIsZoomed = false;
                $(#ImgOverlay).style["cursor"] = "default";
            }
            else
                imgZoomAmount -= val;
        }
        
        Zoomed();
    }
}

function CancelZoom()
{
    imgZoomAmount = 1.0;
    imgIsZoomed = false;
}
///////////////////////////////////////////////////////////////////////////////////////////////
// Handle image and all positioning/sizing over the image (This is used instead of size):    
function GetRatio()
{
    var widthRatio = htmlWidth * 1.0 / imgWidth * 1.0;
    var heightRatio = htmlHeight * 1.0 / imgHeight * 1.0;      
    var ratio = widthRatio * 1.0;

    if (imgHeight * 1.0 * widthRatio * 1.0 > htmlHeight * 1.0)
    {
        ratio = heightRatio * 1.0;
    }

    return ratio * 1.0;
}

function GetMaxRatio() // For determining the max possible size of the image on the window
{
    var (scrWidth, scrHeight) = view.screenBox(#workarea, #dimension);
    var widthRatio = scrWidth * 1.0 / imgWidth * 1.0;
    var heightRatio = scrHeight * 1.0 / imgHeight * 1.0;      
    var ratio = widthRatio * 1.0;

    if (imgHeight * 1.0 * widthRatio * 1.0 > htmlHeight * 1.0)
    {
        ratio = heightRatio * 1.0;
    }

    return ratio * 1.0;
}

function GetImgPercent() // Get the percentage the image takes up on the window comparing to the max possible ratio for the monitor
{
    var maxRatio = imgWidth * GetMaxRatio();
    var curWidth = $(#ImgOverlay).box(#width) * 1.0;
    var curHeight = $(#ImgOverlay).box(#height) * 1.0;
    var heightPercent = curHeight / maxRatio * 100.0;
    var widthPercent = curWidth / maxRatio * 100.0;

    return widthPercent;
}

var (overlayMouseX, overlayMouseY) = 1;
$(#ImgOverlay).on("mousemove", (me) =>
{
    overlayMouseX = me.x;
    overlayMouseY = me.y;

    if (me.buttons == 0x01 && isGif == false && !MenuIsOpen()) // User is dragging image around
    {
        if (imgZoomAmount > 1.0)
        {
            if ($(#toolbar).style["visibility"] == "visible")
            {
                $(#toolbar).style["visibility"] = "none";
                $(#PrevImgImg).style["visibility"] = "none";
                $(#NextImgImg).style["visibility"] = "none";
                $(#ImgName).style["visibility"] = "none";
            }

            isMovingImage = true;
            wOffset = centerWidth - overlayMouseX * imgZoomAmount + (imgWidth * imgRatio) / 2;
            hOffset = centerHeight - overlayMouseY * imgZoomAmount + (imgHeight * imgRatio) / 2;

            ZoomOrMove();
        }
    }
    else
        isMovingImage = false;
});

$(#ImgOverlay).on("mouseup", (me) =>
{
    if (me.buttons == 0x01) // Left mouse button
    {
        if (isDragging)
        {
            isDragging = false;

            if (GetSetting("ContentSwipeImages") == true && !MenuIsOpen() && imgZoomAmount == 1.0) // Drag/swipe
            {
                if (dragStartX - me.x < 0 && (dragStartX - me.x) * -1 >= 100) // right
                {
                    CancelSlideshow();
                    PreviousImage();
                }

                if (dragStartX - me.x > 0 && (dragStartX - me.x) >= 100) // left
                {
                    CancelSlideshow();
                    NextImage();
                }
            }
        }
    }
});

$(#ImgOverlay).on("mousedragrequest", (me) =>
{
    if (!isDragging)
    {
        dragStartX = me.x;
        dragStartY = me.y;
        isDragging = true;
    }
});

var wOffset = centerWidth;
var hOffset = centerHeight;
function WindowChanged()
{   
    htmlHeight = view.box(#height);
    htmlWidth = view.box(#width);

    if (imgToDisplay == null) 
    {
        imgWidth = 400.0;
        imgHeight = 400.0;
        wOffset = centerWidth;
        hOffset = centerHeight;
        //$(#NoImageFound).style["margin-top"] = centerHeight + $(#toolbar).box(#height);
        $(#ImgOverlay).style["background-color"] = "white";
        if (!MenuIsOpen())
            $(#NoImageFound).style["visibility"] = "visible";
    }
    else
         $(#ImgOverlay).style["background-color"] = "transparent";

    if (isGif == true)
    {
        imgWidth = gifWidth;
        imgHeight = gifHeight;
        wOffset = centerWidth;
        hOffset = centerHeight;
    }

    // Control image stretching:
    if (GetSetting("ContentStretch") == true && imgToDisplay)
    {
        imgWidth = htmlWidth;  
        imgHeight = htmlHeight;
    } 
    else
    {
        if (isGif == false && imgToDisplay)
            (imgWidth, imgHeight) = imgToDisplay.size();  
    }

    if ($(#ImgName).style["visibility"] == "none" && GetSetting("OverlayHideName") == false && imgZoomAmount == 1.0)
        $(#ImgName).style["visibility"] = "visible";
    
    if (MenuIsOpen() == true)
        $(#ImgName).style["visibility"] = "none";
    else if (imgZoomAmount == 1.0)
        $(#ImgName).style["visibility"] = "visible";

    // Control zooming methods:
    if (justZoomed == true)
    {
        if (GetSetting("ContentZoomMethod") == "Cursor")
        {
            wOffset = centerWidth - overlayMouseX * imgZoomAmount + (imgWidth * imgRatio) / 2;
            hOffset = centerHeight - overlayMouseY * imgZoomAmount + (imgHeight * imgRatio) / 2;
        }
        else if (GetSetting("ContentZoomMethod") == "Center")
        {
            wOffset = centerWidth - ((imgWidth * imgRatio) * imgZoomAmount) / 2 + (imgWidth * imgRatio) / 2;
            hOffset = centerHeight - ((imgHeight * imgRatio) * imgZoomAmount) / 2 + (imgHeight * imgRatio) / 2;
        }
    }

    imgRatio = GetRatio();
    centerWidth = ((htmlWidth / 2.0) - (imgWidth * imgRatio) / 2.0);
    centerHeight = (htmlHeight / 2.0) - (imgHeight * imgRatio) / 2.0;
    (scrWidth, scrHeight) = view.screenBox(#workarea, #dimension);
    view.mediaVars { window-percent : GetImgPercent() };
    view.mediaVars { window-width : (imgWidth * imgRatio) };

    if (imgWidth * 2 < imgHeight) // Add extra width to overlay if the image is too thin
    {
        imgTooThin = true;
        $(#ImgOverlay).style["top"] = 0;

        if (htmlWidth < 500)
        {   
            $(#ImgOverlay).style["width"] = "*";
            $(#ImgOverlay).style["left"] = "0";
        }       
        else
        {
            $(#ImgOverlay).style["width"] = 500;
            $(#ImgOverlay).style["left"] = (imgWidth * imgRatio / 2) - 250;
        }
    }
    else
    {
        imgTooThin = false;
        $(#ImgOverlay).style["width"] = (imgWidth * imgRatio);
        $(#ImgOverlay).style["left"] = 0;
        $(#ImgOverlay).style["margin-left"] = centerWidth;
    }

    if (imgHeight * 2 < imgWidth && (imgHeight * imgRatio) < 800) // Don't let the overlay get too low when images are too short
    {
        imgTooShort = true;
        $(#ImgOverlay).style["margin-top"] = 0;

        $(#ImgOverlay).style["top"] = 0;
        $(#ImgOverlay).style["height"] = htmlHeight;
        
        var parentHeight = (imgHeight * imgRatio);
        
        if (MenuIsOpen())
            $(#toolbar).style["visibility"] = "hidden";
        else
        {
            if (!blockToolbar && !isMovingImage)
                $(#toolbar).style["visibility"] = "visible";
        }

        $(#NextImgImg).style["top"] = (htmlHeight / 2) + (imgHeight * imgRatio) / imgHeight - ($(#NextImgImg).box(#height)) / 2;
        $(#PrevImgImg).style["top"] = (htmlHeight / 2) + (imgHeight * imgRatio) / imgHeight - ($(#PrevImgImg).box(#height)) / 2;
    }
    else
    {   
        imgTooShort = false;
        $(#ImgOverlay).style["height"] = (imgHeight * imgRatio);
        $(#ImgOverlay).style["margin-top"] = centerHeight;

        // Place image arrows at center of image on Y axis:
        var parentHeight = $(#ImgOverlay).style["height"];
        if (!blockToolbar && !isMovingImage && GetSetting("OverlayHideToolbar") == false)
            $(#toolbar).style["visibility"] = "visible";
        
        $(#NextImgImg).style["top"] = parentHeight / 2;
        $(#PrevImgImg).style["top"] = parentHeight / 2;
    }

    $(#ImgOverlay).style["margin-left"] = centerWidth;

    // Move toolbar item to the right of toolbar:
    $(#DeleteImg).style["margin-left"] = $(#toolbar).style#width;
    $(#DeleteImg).style["margin-right"] = 5;

    $(#gifimg).style["width"] = (imgWidth * imgRatio);
    $(#gifimg).style["top"] = centerHeight;
    $(#gifimg).style["left"] = centerWidth;

    if (imgZoomAmount > 1.0) // Add support for zoomed images
    {
        if ($(#ImgOverlay).style["cursor"] != "none")
        {
            $(#toolbar).style["position"] = "fixed";
            $(#toolbar).style["top"] = 0;
            $(#ImgOverlay).style["cursor"] = "move";
        }
    }
    else
    {
        if (imgTooShort == true && htmlHeight > (imgHeight * imgRatio))
        {
            $(#ImgName).style["position"] = "absolute";
            $(#ImgName).style["bottom"] = centerHeight;
            $(#gifimg).style["visibility"] = "none";
            $(#toolbar).style["position"] = "fixed";
            $(#toolbar).style["top"] = centerHeight;
            $(#toolbar).style["width"] = "*";
            $(#Info).style["position"] = "relative";
            $(#Info).style["right"] = 0;
            $(#Info).style["margin-right"] = 3;
            $(#DeleteImg).style["position"] = "relative";
            $(#DeleteImg).style["right"] = 0;
        } 
        else
        {
            $(#ImgName).style["position"] = "absolute";
            $(#ImgName).style["bottom"] = "-2dip";
            $(#toolbar).style["position"] = "relative";
            $(#toolbar).style["top"] = 0;
            $(#toolbar).style["width"] = (imgWidth * imgRatio);
            $(#DeleteImg).style["position"] = "absolute";
            $(#Info).style["position"] = "absolute";
            $(#Info).style["right"] = 5;
            $(#DeleteImg).style["right"] = $(#DeleteImg).box(#height);
        }
    }
}

function paint(gfx)
{
    if (imgToDisplay != null && imgZoomAmount == 1.0)
    {
        wOffset = centerWidth;
        hOffset = centerHeight;
    }

    gfx.fillColor(color(255, 255, 255, 100));
    gfx.rectangle(wOffset, hOffset, (imgWidth * imgRatio) * imgZoomAmount, (imgHeight * imgRatio) * imgZoomAmount);

    if (allowFillImg == true) 
    {
        $(#gifimg).style["visibility"] = "none";           
        gfx.drawImage(imgToDisplay, wOffset, hOffset, (imgWidth * imgRatio) * imgZoomAmount, (imgHeight * imgRatio) * imgZoomAmount);
    }
}

// Refresh functions force free memory caused by unwanted cached images:
function RefreshImage()
{
    $(#FillImg).remove();
    $(body).prepend(<div id="FillImg"></div>);
    $(#FillImg).paintContent = paint; 
}

$(#FillImg).paintContent = paint;  