/* TIScript code by: Ethan Christie */

var imgToDisplay = self.loadImage("C:/Users/ETHORBIT.DESKTOP-VGMLUB4/source/repos/Random Photo/ui/noimagefound.png");
var ImageList = new Array();
var CurrentImg = 0;

function GetFullImgPath(filename)
{
    var imgPath = GetSetting("ImgFolder") + "/";
    return imgPath + filename;
}

// Show/hide content displayed over image:
function ShowContentOverlay()
{
    if (!onToolbar && !MenuIsOpen())
    {
        $(#ImgMenu).style["visibility"] = "visible";  
        $(#ImgOverlay).style["cursor"] = "default";

        if (GetSetting("OverlayHideToolbar") == true)
        {
            $(#toolbar).style["visibility"] = "visible";
        }
    } 
}

function HideContentOverlay()
{
    if (!onImgMenuBtn)
    {
        if (GetSetting("OverlayHideToolbar") == true)
        {
            $(#toolbar).style["visibility"] = "hidden";
        }

        $(#ImgMenu).style["visibility"] = "none";
    }
}

// Show/Hide window border, cover taskbar & overlap all windows:
function FullscreenToggle() 
{
    fullscreen = !fullscreen;
    if (fullscreen == true)
    {
        view.windowState = View.WINDOW_MINIMIZED; // FULL_SCREEN won't cover taskbar if the window is already in fullscreen
        view.windowState = View.WINDOW_FULL_SCREEN;
    }
    else 
    {
        view.windowState = View.WINDOW_SHOWN;
        $(body).style["cursor"] = "default";
    }
}

///////////////////////////////////////////////////////////////////////////////////////////////
// Handle dynamic content functionality:
function Slideshowoff()
{
    $(#Slideshow).style["opacity"] = 0.70;
    ShowOverlayText("Slideshow was cancelled.", "red", "top", 2000ms);
}

function CancelSlideshow()
{
    if (slideshow == true)
    {
        Slideshowoff();
        slideshow = false;
    }
}

function SlideshowToggle() 
{
    slideshow = !slideshow;
    if (slideshow == true)
    {
        $(#Slideshow).style["opacity"] = 1.0;
        ShowOverlayText("Slideshow started.", "green", "top", 2000ms);

        var switchTime = GetSetting("SlideshowDisplayTime").toString() + "s";
        self.timer(Duration.parse(switchTime), () => 
        {
            if (!slideshow)
                return false;

            NextImage();
            return true;
        });
    }
    else
    {
        Slideshowoff();
    }
}

function ShuffleImages()
{
    CurrentImg = 0;

    ImageList.sort(() => 
    {
        if (Math.random() > 0.5)
            return +1;
        else
            return -1;
    });

    DisplayFirstImage();
    NextImage();
}

function UpdateImageList() // Reconstruct image list based on saved image path
{
    ImageList = new Array();
    System.scanFiles(GetSetting("ImgFolder") + "/*.*", (name, attr) => 
    {
        // Only match supported whitelisted formats (jpg,png,bmp,gif,svg,webp):
        if (!name.match(".*.[.]([Jj][Pp][Gg]|[Pp][Nn][Gg]|[Bb][Mm][Pp]|[Gg][Ii][Ff]|[Ss][Vv][Gg]|[Ww][Ee][Bb][Pp])$")) 
            return true;
        // Only match files (not directories):
        if (attr & System.IS_DIR || attr & System.IS_HIDDEN) 
            return true;

        ImageList.push(name);
        return true;
    });

    ShuffleImages();
}

function ImgIsGIF()
{
    if (imgToDisplay == null)
        return false;

    if (imgToDisplay.url.match(".*.[.]([Gg][Ii][Ff])$"))
        return true;
    else
        return false;
}

function DisplayImage(index)
{
    if ($(#gifimg))
    {
        $(#gifimg).attributes["src"] = "";
    }
        
    RefreshImage();

    if (ImgIsGIF() == true)
    {
        (imgWidth, imgHeight) = imgToDisplay.size(); // Backup height/width for when we remove the loaded image
        imgToDisplay = null; // If this remains valid then we would be allocating memory for 2 of the same gifs!
        $(#gifimg).attributes["src"] = GetFullImgPath(ImageList[index]);
    }

    imgToDisplay = self.loadImage(GetFullImgPath(ImageList[index]));
    WindowChanged();
}

function DisplayFirstImage()
{
    // Display no image error if the first image in the image list is null:
    if (ImageList.length > 0)
    {
        if ($(#NoImageFound).style["visibility"] == "visible")
            $(#NoImageFound).style["visibility"] = "none";

        DisplayImage(1);
    }
    else
    {
        $(#NoImageFound).style["visibility"] = "visible";
        imgToDisplay = self.loadImage("C:/Users/ETHORBIT.DESKTOP-VGMLUB4/source/repos/Random Photo/ui/noimagefound.png");
    }
}

function NextImage()
{
    if (CurrentImg + 1 < ImageList.length)
    {
        CurrentImg++;
        DisplayImage(CurrentImg);
    }
    else
       ShuffleImages(); // Let the next image work forever
}

function PreviousImage()
{
    if (CurrentImg - 1 > 0)
    {
        CurrentImg--;
        DisplayImage(CurrentImg);
    }
}

function ZoomImage()
{

}

function ZoomoutImage()
{

}
///////////////////////////////////////////////////////////////////////////////////////////////
// Handle image and all positioning/sizing over the image (This is used instead of size):    
function GetRatio()
{
    var widthRatio = htmlWidth * 1.0 / imgWidth * 1.0;
    var heightRatio = htmlHeight * 1.0 / imgHeight * 1.0;      
    var ratio = widthRatio * 1.0;

    if (imgHeight * 1.0 * widthRatio * 1.0 > htmlHeight * 1.0)
    {
        ratio = heightRatio * 1.0;
    }

    return ratio * 1.0;
}

function GetMaxRatio() // For determining the max possible size of the image on the window
{
    var (scrWidth, scrHeight) = view.screenBox(#workarea, #dimension);
    var widthRatio = scrWidth * 1.0 / imgWidth * 1.0;
    var heightRatio = scrHeight * 1.0 / imgHeight * 1.0;      
    var ratio = widthRatio * 1.0;

    if (imgHeight * 1.0 * widthRatio * 1.0 > htmlHeight * 1.0)
    {
        ratio = heightRatio * 1.0;
    }

    return ratio * 1.0;
}

function GetImgPercent() // Get the percentage the image takes up on the window comparing to the max possible ratio for the monitor
{
    var maxRatio = imgWidth * GetMaxRatio();
    var curWidth = $(#ImgOverlay).box(#width) * 1.0;
    var curHeight = $(#ImgOverlay).box(#height) * 1.0;
    var heightPercent = curHeight / maxRatio * 100.0;
    var widthPercent = curWidth / maxRatio * 100.0;

    return widthPercent;
}

function WindowChanged()
{
    htmlHeight = view.box(#height);
    htmlWidth = view.box(#width);

    if (GetSetting("ContentStretch") == true && imgToDisplay)
    {
        imgWidth = htmlWidth;  
        imgHeight = htmlHeight;
    } 
    else
    {
        if (imgToDisplay)
            (imgWidth, imgHeight) = imgToDisplay.size();  
    }

    imgRatio = GetRatio();
    centerWidth = ((htmlWidth / 2.0) - (imgWidth * imgRatio) / 2.0);
    centerHeight = (htmlHeight / 2.0) - (imgHeight * imgRatio) / 2.0;
    (scrWidth, scrHeight) = view.screenBox(#workarea, #dimension);
    view.mediaVars { window-percent : GetImgPercent() };
    view.mediaVars { window-width : (imgWidth * imgRatio) };

    // Match container's size and position to the image:
    $(#ImgOverlay).style["width"] = (imgWidth * imgRatio);
    $(#ImgOverlay).style["height"] = (imgHeight * imgRatio);
    $(#ImgOverlay).style["margin-top"] = centerHeight;
    $(#ImgOverlay).style["margin-left"] = centerWidth;
    $(#ImgOverlay).style["background-image"] = imgToDisplay;

    // Place image arrows at center of image on Y axis:
    var parentHeight = $(#ImgOverlay).style["height"];
    $(#NextImgImg).style["top"] = parentHeight / 2;
    $(#PrevImgImg).style["top"] = parentHeight / 2;

    // Move toolbar item to the right of toolbar:
    $(#Info).style["margin-left"] = $(#toolbar).style#width;
    $(#Info).style["margin-right"] = 5;

    $(#gifimg).style["width"] = (imgWidth * imgRatio);
    $(#gifimg).style["top"] = centerHeight;
    $(#gifimg).style["left"] = centerWidth;
}

function paint(gfx)
{
    gfx.fillColor(color(255, 255, 255));
    gfx.rectangle(centerWidth, centerHeight, imgWidth * imgRatio, imgHeight * imgRatio);

    if (ImgIsGIF() == false) // gfx.drawImage won't draw the gif's frames, so we use <picture> element for that instead
        gfx.drawImage(imgToDisplay, centerWidth, centerHeight, imgWidth * imgRatio, imgHeight * imgRatio);
}

// Refresh functions force free memory caused by unwanted cached images:
function RefreshImage()
{
    $(#FillImg).remove();
    $(body).prepend(<div id="FillImg"></div>);
    $(#FillImg).paintContent = paint; 
}

$(#FillImg).paintContent = paint;  