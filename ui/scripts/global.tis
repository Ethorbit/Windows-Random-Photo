/* TIScript code by: Ethan Christie */

////////////////////////////////////////////////////////////////////////////////////////////
// Global variables/functions & events:
var imgToDisplay = self.loadImage("G:/Pictures/debug/Jordan-19A-017_-_A_really_big_sandbox.jpg");
var (imgWidth, imgHeight) = 0.0;
var imgRatio = 0.0;
var centerWidth = 0.0;
var centerHeight = 0.0;
var htmlHeight = 0.0, htmlWidth = 0.0;
var fullscreen = false;
var slideshow = false;
var onToolbar = false;
var onBtn = false;
var (scrWidth, scrHeight) = view.screenBox(#workarea, #dimension);
var MovedMouse = false;
var debugMsg = null;

view.on("size", () =>
{
    WindowChanged();
    ExtendMenu();

    // Wait 1ms in case the window is affected by Aero Snap:
    self.timer(1ms, () =>
    {
        WindowChanged();
        ExtendMenu();
        return false;
    });
});

view.on("move", () =>
{
    WindowChanged();
    ExtendMenu();
});

$(#ImgOverlay).on("keydown", (me) =>
{
    for (var key in Keys.KeyList)
    {
        if (me.keyCode == key.keycode)
        {
            switch (key.keyname)
            {
            case GetSetting("HideOverlayHotkey"):
                HideContentOverlay();
            return;
            case GetSetting("NextImgHotkey"):
                NextImage();
            return;
            case GetSetting("PrevImgHotkey"):
                PreviousImage();
            return;
            case GetSetting("ZoominHotkey"):
                ZoomImage();
            return;
            case GetSetting("ZoomoutHotkey"):
                ZoomoutImage();
            return;
            case GetSetting("FullscreenHotkey"):
                FullscreenToggle();
            return;
            }
        }
    }
});

namespace Keys
{
    class Key 
    {
        function this(mKeyname, mKeycode)
        {
            this.keyname = mKeyname;
            this.keycode = mKeycode;
        }
    }

    var KeyList = new Array();
}

namespace Settings
{
    class Setting
    {
        function this(mValue, mSection)
        {
            this.value = mValue;
            this.section = mSection;
        }
    }

    class DefaultSettings
    {
        var NextImgHotkey = new Setting("RIGHT", "Hotkeys");
        var PrevImgHotkey = new Setting("LEFT", "Hotkeys");
        var ZoominHotkey = new Setting("PLUS", "Hotkeys");
        var ZoomoutHotkey = new Setting("SUBTRACT", "Hotkeys");
        var OverlayHideTime = new Setting(700, "Behavior");
        var OverlayHideToolbar = new Setting(false, "Behavior");
        var SlideshowDisplayTime = new Setting(5, "Behavior");
        var ContentStretch = new Setting(false, "Behavior");
        var ContentZoomMultiplier = new Setting(5, "Behavior");
    }

    class SavedSettings 
    {
        var ImgFolder = new Setting(null, "Other");
        var NextImgHotkey = new Setting(null, "Hotkeys");
        var PrevImgHotkey = new Setting(null, "Hotkeys");
        var ZoominHotkey = new Setting(null, "Hotkeys");
        var ZoomoutHotkey = new Setting(null, "Hotkeys");
        var HideOverlayHotkey = new Setting(null, "Hotkeys");
        var FullscreenHotkey = new Setting(null, "Hotkeys");
        var OverlayHideTime = new Setting(null, "Behavior");
        var OverlayHideToolbar = new Setting(null, "Behavior");
        var SlideshowDisplayTime = new Setting(null, "Behavior");
        var ContentStretch = new Setting(null, "Behavior");
        var ContentZoomMultiplier = new Setting(null, "Behavior");
    }
}

function UpdateSettingsList()
{
    for (var (name, setting) in Settings.SavedSettings)
    {
        if (SettingIsSaved(setting.section, name))
            setting.value = view.getINI(setting.section, name);
        else
            setting.value = null;
    }

    NoDuplicateKeys();
}

function GetSettingObject(mName)
{
    for (var (name, setting) in Settings.SavedSettings)
    {
        if (name == mName)
            return setting;
    }
}

function GetDefSettingObject(mName)
{
    for (var (name, setting) in Settings.DefaultSettings)
    {
        if (name == mName)
            return setting;
    }
}

function GetSetting(name)
{
    var setting = GetSettingObject(name);
    var defSetting = GetDefSettingObject(name);

    if (setting == null)
        return defSetting.value;
    else
        return setting.value;
}

function SettingIsSaved(section, key)
{
    if (view.getINI(section, key).length > 0)
        return true;
}

function IsADefaultSetting(name)
{
    var setting = GetDefSettingObject(name);
    if (setting)
        return true;
    else
        return false;
}

function debugbox(message)
{
    if (debugMsg == null)
        debugMsg = view.msgbox(#information, message, "Debug Box", #ok);

    if (debugMsg == #ok)
        debugMsg = null;
}

function ShowImage(imgPath)
{
    imgToDisplay = self.loadImage(imgPath);
}

function MenuIsOpen()
{
    var bOpen = false;
    for (var v in $$(.BtnMenu))
    {
        if (v.style["visibility"] == "visible")
        {
            bOpen = true;
            break;
        }
    }

    return bOpen;
}

function GetTallestElement(menu)
{
    var tallestEle = null;
    for (var v in menu.$$(*))
    {
        if (tallestEle)
        {
            if (v.box(#height) > tallestEle.box(#height))
            {
                tallestEle = v;
            }
        }
        else
        {
            tallestEle = v;
        }
    }

    return tallestEle;
}    

function ShowOverlayText(text, color, position, time) // Dynamically display message over image container
{
    for (var v in $$(#OverlayMessage)) { v.remove();} // Remove any previous messages
    var element = $(#ImgOverlay).append(<div id="OverlayMessage"></div>);
    element.text = text;
    element.style["opacity"] = 0;
    element.style["position"] = "fixed";
    element.style["background-color"] = color;
    element.style["color"] = "white";
    element.style["font-size"] = "30dip";
    element.style["width"] = "*";
    element.style["height"] = 70dip;
    element.style["text-align"] = "center";
    element.style["transition"] = "opacity(linear, 150ms);"
    element.attributes["fade"] = "none";
    
    self.timer(100ms, () => // Hide the part where the text is positioning
    {
      element.attributes["fade"] = "in"; 
      element.style["opacity"] = 1.0;
    });

    var bContinue = true;
    self.timer(1ms, () =>
    {
        if (bContinue)
        {
            if (position == "bottom")
                element.style["top"] = centerHeight + $(#ImgOverlay).box(#height) - element.box(#height);
            else if (position == "top")
            {
                 element.style["top"] = centerHeight;
                 $(#toolbar).style["margin-top"] = element.box(#height); // Move toolbar out of the way
            }

            return true;
        }
        else
            return false;
    });

    self.timer(time, () =>
    {
        if (position == "top")
            $(#toolbar).style["margin-top"] = 0;
            
        element.remove();
        bContinue = false;
        return false;
    });
}

function NoKeyName(element)
{
    element.attributes["maxlength"] = 11;
    element.text = "Enter a key";
}

$(#toolbar).on("mouseenter", () =>
{
    onToolbar = true;
});

$(#toolbar).on("mouseleave", () =>
{
    onToolbar = false;
});

for (var (k, v) in $$(button))
{
    if (v.parent != $(#ImgMenu))
    {
        v.on("mouseenter", () => 
        {
            onBtn = true;
        });
        
        v.on("mouseleave", () => 
        {
            onBtn = false;
        });
    }
}

//////////////////////////////////////////////////////////
// Handle links (in default browser):
for (var v in $$(span))
{
    v.on("click", (me) =>
    {
        Sciter.launch(me.target.attributes["href"]);
    });
}