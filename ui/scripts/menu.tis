/* TIScript code by: Ethan Christie */

//////////////////////////////////////////////////////////////
// Handle button menus:
function ExtendMenu()
{
    for (var v in $$(.BtnMenu))
    { 
        v.style["height"] = 5000;
        v.style["height"] = GetTallestElement(v.$(.container)).box(#height) + $(#ImgOverlay).box(#height);
        v.$(.container).style["height"] = v.box(#height);
    }
}

function HideMenus(whitelist)
{
    for (var v in $$(.BtnMenu)) // Hide all other menus
    {
        v.style["height"] = 0;
        if (v != whitelist) v.style["visibility"] = "none";
    }
}

function ShowMenu(element)
{
    HideMenus(element);
    $(#ImgOverlay).style["cursor"] = "default";

    element.style["visibility"] = "visible";
    element.attributes["fade"] = "none";
    element.attributes["fade"] = "in";
    if (element == $(#SettingsMenu))
        TryDefaultSettings();

    ExtendMenu();
    HideContentOverlay();
}

//////////////////////////////////////////////////////////////
// Add image menu functionality:
var onImgMenuBtn = false;
for (var (k,v) in $$(.ImgMenuBtn))
{
    v.on("mouseenter", () => 
    {
        onImgMenuBtn = true;
    })

    v.on("mouseleave", () => 
    {
        onImgMenuBtn = false;
    })
}

$(#ImgOverlay).on("mousemove", () =>
{  
    MovedMouse = true;
    ShowContentOverlay();
});

$(#ImgOverlay).on("mouseleave", () =>
{
    HideContentOverlay();
});

event mousestop
{
    MovedMouse = false;
    var savedTime = (GetSetting("OverlayHideTime").toInteger() - 100).toString() + "ms";

    self.timer(Duration.parse(savedTime), () =>
    {
        if (!MovedMouse)
        {
            HideContentOverlay();

            if (MenuIsOpen() == false)
                $(#ImgOverlay).style["cursor"] = "none";

            if (fullscreen)
                $(body).style["cursor"] = "none";
        }

        return false;
    });
}

///////////////////////////////////////////////////////////////////////////
// Handle custom element tool tips:
for (var (k, v) in $$(img[alt=hint]))
{
    var eleCount = k;
    v.on("mouseenter", (me) =>
    {   
        var hintTxt = $$(.HintText)[eleCount];
        hintTxt.style["visibility"] = "visible";
        var (xx, yy) = view.cursorLocation();
        hintTxt.style["top"] = yy;
        hintTxt.style["left"] = xx - 50;
    });

    v.on("mouseleave", (me) =>
    {   
        $$(.HintText)[eleCount].style["visibility"] = "none";
    });
}
////////////////////////////////////////////////////////////
// Handle slider displays:
function UpdateSlider(slider)
{
    var nextEle = slider.next;

    if (nextEle.attributes["data"] == "s")
        nextEle.text = slider.value + "s";
    if (nextEle.attributes["data"] == "ms")
        nextEle.text = slider.value + "ms";
    if (nextEle.attributes["data"] == "%")  
        nextEle.text = slider.value + "%";
}

for (var v in $$(.sliderEle))
{
    v.on("change", (me) =>
    {
        UpdateSlider(me.target);
    });
}

//////////////////////////////////////////////////////////////
// Handle hotkey input boxes:
function NoDuplicateKeys()
{
    for (var a in $(#SettingsMenu).$$(input[type=text]))
    {
        for (var b in $(#SettingsMenu).$$(input[type=text]))
        {
            if (a.text == b.text && a != b && a.text != "Enter a key") 
            {
                NoKeyName(b);
                ShowOverlayText("ERROR: Duplicate bind prevented.", "red", "bottom", 1300ms);

                if (view.getINI("Hotkeys", b.attributes["name"]) == a.text)
                    view.saveINI("Hotkeys", b.attributes["name"], null);
            }
        }
    }
}

for (var v in $(#SettingsMenu).$$(input[type=text]))
{
    v.subscribe("keydown", (me) =>
    {
        for (var key in Keys.KeyList)
        {
            if (key.keycode == me.keyCode)
            {
                me.target.attributes["maxlength"] = key.keyname.length;
                me.target.text = key.keyname;
                NoDuplicateKeys();
            }
        }
    });
}

////////////////////////////////////////////////////////////////
// Default Settings:
function TryDefaultSettings()
{
    function SetValue(element, value)
    {
        if (element.attributes["type"] == "text")
        {
            element.attributes["maxlength"] = value.length;
            element.text = value;
        }
        else
        {
            if (element.attributes["type"] == "checkbox")
            {
                if (value == true)
                    element.checked = true;
            }
            else
            {
                element.value = value;

                if (element.attributes["type"] == "hslider")
                    UpdateSlider(element);
            }
        }
    }

    var mName = "";
    for (var v in $(#SettingsMenu).$$(input))
    {
        mName = v.attributes["name"];
        var mSetting = GetSettingObject(mName);
        var defSetting = GetDefSettingObject(mName);
        
        var savedKey = "";
        savedKey = view.getINI(mSetting.section, mName);        

        if (SettingIsSaved(mSetting.section, mName))
            SetValue(v, savedKey);     
        else if (IsADefaultSetting(mName))
            SetValue(v, defSetting.value);
        else 
        {
            if (v.attributes["type"] == "text")
                NoKeyName(v);
        }
    }
}