/* TIScript code by: Ethan Christie */

//////////////////////////////////////////////////////////////
// Handle button menus:
view.on("size", () =>
{
    ExtendMenu();
});

view.on("move", () =>
{
    ExtendMenu();
});

function ExtendMenu()
{
    for (var v in $$(.BtnMenu))
    { 
        v.style["height"] = 5000;
        v.style["height"] = GetTallestElement(v.$(.container)).box(#height) + $(#ImgOverlay).box(#height);
        v.$(.container).style["height"] = v.box(#height);
    }
}

function HideMenus(whitelist)
{
    for (var v in $$(.BtnMenu)) // Hide all other menus
    {
        v.style["height"] = 0;
        if (v != whitelist) v.style["visibility"] = "none";
    }
}

function ShowMenu(element)
{
    HideMenus(element);
    element.style["visibility"] = "visible";
    element.attributes["fade"] = "none";
    element.attributes["fade"] = "in";
    if (element == $(#SettingsMenu))
        TryDefaultSettings();

    ExtendMenu();
    HideArrows();
}

//////////////////////////////////////////////////////////////
// Add image menu functionality:
var onImgMenuBtn = false;
for (var (k,v) in $$(.ImgMenuBtn))
{
    v.on("mouseenter", () => 
    {
        onImgMenuBtn = true;
    })

    v.on("mouseleave", () => 
    {
        onImgMenuBtn = false;
    })
}

$(#ImgOverlay).on("mousemove", () =>
{  
    MovedMouse = true;
    if (!onToolbar && !MenuIsOpen())
        $(#ImgMenu).style["visibility"] = "visible";      
});

$(#ImgOverlay).on("mouseleave", () =>
{
    HideArrows();
});

var MovedMouse = false;
event mousestop
{
    MovedMouse = false;
    self.timer(700ms, () =>
    {
        if (!MovedMouse)
            HideArrows();

        return false;
    });
}

function HideArrows()
{
    if (!onImgMenuBtn)
        $(#ImgMenu).style["visibility"] = "none";
}

///////////////////////////////////////////////////////////////////////////
// Handle custom element tool tips:
for (var (k, v) in $$(img[alt=hint]))
{
    var eleCount = k;
    v.on("mouseenter", (me) =>
    {   
        var hintTxt = $$(.HintText)[eleCount];
        hintTxt.style["visibility"] = "visible";
        var (xx, yy) = view.cursorLocation();
        hintTxt.style["top"] = yy;
        hintTxt.style["left"] = xx - 50;
    });

    v.on("mouseleave", (me) =>
    {   
        $$(.HintText)[eleCount].style["visibility"] = "none";
    });
}
////////////////////////////////////////////////////////////
// Handle slider displays:
function UpdateSlider(slider)
{
    var nextEle = slider.next;

    if (nextEle.attributes["data"] == "s")
        nextEle.text = slider.value + "s";
    if (nextEle.attributes["data"] == "ms")
        nextEle.text = slider.value + "ms";
    if (nextEle.attributes["data"] == "%")  
        nextEle.text = slider.value + "%";
}

for (var v in $$(.sliderEle))
{
    v.on("change", (me) =>
    {
        UpdateSlider(me.target);
    });
}

//////////////////////////////////////////////////////////////
// Handle hotkey input boxes:
function NoDuplicateKeys(element)
{
    for (var v in $(#SettingsMenu).$$(input[type=text]))
    {
        if (v != element && v.text == element.text)
        {
            NoKeyName(v);
            break;
        }
    }
}

for (var v in $(#SettingsMenu).$$(input[type=text]))
{
    v.subscribe("keydown", (me) =>
    {
        for (var (keyname, keycode) in Event)
        {
            var keyStr = keyname.toString();
            if (keyStr.substr(0, 2) == "VK")
            {
                if (keycode == me.keyCode)
                {
                    var hotkey = keyStr.replace("VK_", "");
                    me.target.attributes["maxlength"] = hotkey.length;
                    me.target.text = hotkey;
                    NoDuplicateKeys(me.target);
                }
            }
        }
    });
}

////////////////////////////////////////////////////////////////
// Default Settings:
function TryDefaultSettings()
{
    function SetValue(element, value)
    {
        if (element.attributes["type"] == "text")
        {
            element.attributes["maxlength"] = value.length;
            element.text = value;
        }
        else
        {
            element.value = value;
            if (element.attributes["type"] == "hslider")
                UpdateSlider(element);
        }
    }

    var name = "";
    for (var v in $(#SettingsMenu).$$(input))
    {
        name = v.attributes["name"];
        var savedKey = "";
        if (view.getINI)
            savedKey = view.getINI("Hotkeys", name);
            
        if (IsADefaultSetting(name))
            SetValue(v, DefaultSettings[name]);
        else if (SettingIsSaved("Hotkeys", name))
            SetValue(v, savedKey);
        else 
        {
            if (v.attributes["type"] == "text")
                NoKeyName(v);
        }
    }
}