/* TIScript code by: Ethan Christie */

namespace Settings
{
    class Setting
    {
        function this(mValue, mSection)
        {
            this.value = mValue;
            this.section = mSection;
        }
    }

    class DefaultSettings
    {
        var NextImgHotkey = new Setting("RIGHT", "Hotkeys");
        var PrevImgHotkey = new Setting("LEFT", "Hotkeys");
        var ZoominHotkey = new Setting("PLUS", "Hotkeys");
        var ZoomoutHotkey = new Setting("MINUS", "Hotkeys");
        var ShuffleImgHotkey = new Setting("F5", "Hotkeys");
        var StopSlideshowHotkey = new Setting("SPACE", "Hotkeys");
        var FullscreenHotkey = new Setting("F11", "Hotkeys");
        var OverlayHideTime = new Setting(700, "Behavior");
        var OverlayHideToolbar = new Setting(false, "Behavior");
        var OverlayHideName = new Setting(false, "Behavior");
        var SlideshowDisplayTime = new Setting(5, "Behavior");
        var ContentStretch = new Setting(false, "Behavior");
        var ContentZoomMultiplier = new Setting(5, "Behavior");
        var ContentZoomMethod = new Setting("Cursor", "Behavior");
        var ContentSwipeImages = new Setting(false, "Behavior");
    }

    class SavedSettings 
    {
        var ImgFolder = new Setting(null, "Other");
        var NextImgHotkey = new Setting(null, "Hotkeys");
        var PrevImgHotkey = new Setting(null, "Hotkeys");
        var ZoominHotkey = new Setting(null, "Hotkeys");
        var ZoomoutHotkey = new Setting(null, "Hotkeys");
        var ZoomoutAllHotkey = new Setting(null, "Hotkeys");
        var ShuffleImgHotkey = new Setting(null, "Hotkeys");
        var StopSlideshowHotkey = new Setting(null, "Hotkeys");
        var HideOverlayHotkey = new Setting(null, "Hotkeys");
        var FullscreenHotkey = new Setting(null, "Hotkeys");
        var OverlayHideTime = new Setting(null, "Behavior");
        var OverlayHideToolbar = new Setting(null, "Behavior");
        var OverlayHideName = new Setting(null, "Behavior");
        var SlideshowDisplayTime = new Setting(null, "Behavior");
        var ContentStretch = new Setting(null, "Behavior");
        var ContentZoomMultiplier = new Setting(null, "Behavior");
        var ContentZoomMethod = new Setting(null, "Behavior");
        var ContentSwipeImages = new Setting(null, "Behavior");
    }
}

function UpdateSettingsList()
{
    for (var (name, setting) in Settings.SavedSettings)
    {
        if (SettingIsSaved(setting.section, name))
            setting.value = view.getINI(setting.section, name);
        else
            setting.value = null;
    }

    NoDuplicateKeys();
}

function GetSettingObject(mName)
{
    for (var (name, setting) in Settings.SavedSettings)
    {
        if (name == mName)
            return setting;
    }
}

function GetDefSettingObject(mName)
{
    for (var (name, setting) in Settings.DefaultSettings)
    {
        if (name == mName)
            return setting;
    }
}

function GetSetting(name)
{
    var setting = GetSettingObject(name);
    var defSetting = GetDefSettingObject(name);

    if (setting == null)
        return defSetting.value;
    else
        return setting.value;
}

function SettingIsSaved(section, key)
{
    if (view.getINI(section, key).length > 0)
        return true;
}

function IsADefaultSetting(name)
{
    var setting = GetDefSettingObject(name);
    if (setting)
        return true;
    else
        return false;
}

function NoKeyName(element)
{
    element.attributes["maxlength"] = 11;
    element.text = "Enter a key";
}